/*
 * Script to initialize the database.
 */


CREATE TYPE actor_types AS ENUM ('member', 'organization');
CREATE TYPE object_types AS ENUM ('note', 'collection', 'orderedcollection');
CREATE TYPE activity_types AS ENUM ('create', 'update');

CREATE TABLE objects ( -- Column names are used as JSON key name
	id_internal bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	id text NOT NULL,
	content text,
	published timestamptz,
	revisions bigint REFERENCES objects
);

CREATE TABLE extension_kvs (
	id bigint PRIMARY KEY REFERENCES objects,
	key text NOT NULL,
	value json
);

CREATE TABLE object_type_objects (
	id bigint PRIMARY KEY REFERENCES objects,
	type object_types NOT NULL
);

CREATE TABLE actors (
	actor_id text PRIMARY KEY,
	id bigint REFERENCES objects UNIQUE NOT NULL,
	actortype actor_types NOT NULL
);

CREATE TABLE collection_items (
	id bigint REFERENCES objects NOT NULL,
	item bigint REFERENCES objects NOT NULL
);

CREATE TABLE ordered_collection_items (
	id bigint REFERENCES objects,
	idx int,
	item bigint REFERENCES objects NOT NULL,
	PRIMARY KEY (id, idx)
);

CREATE TABLE activities (
	id bigint PRIMARY KEY REFERENCES objects,
	activitytype activity_types NOT NULL,
	object bigint REFERENCES objects,
	target bigint REFERENCES objects
);

CREATE TABLE sent (
	actor text REFERENCES actors,
	message bigint REFERENCES objects,
	PRIMARY KEY (actor, message)
);

CREATE TABLE recieved (
	actor text REFERENCES actors,
	message bigint REFERENCES objects,
	PRIMARY KEY (actor, message)
);

CREATE TABLE belongings (
	-- "user" and "group" are both reserved
	member text REFERENCES actors,
	organization text REFERENCES actors,
	-- privilege
	PRIMARY KEY (member, organization)
);

CREATE FUNCTION check_actor_type() RETURNS trigger AS $check_actor_type$
	DECLARE
		actortype actor_types;
  BEGIN

    SELECT type INTO actortype FROM actors WHERE id = NEW.member;
    IF actortype <> 'member' THEN
      RAISE EXCEPTION 'a group id is passed in place of user id';
    END IF;

		SELECT type INTO actortype FROM actors WHERE id = NEW.organization;
    IF actortype <> 'organization' THEN
      RAISE EXCEPTION 'a user id is passed in place of group id';
		END IF;

    RETURN NEW;
  END;
$check_actor_type$ LANGUAGE plpgsql;

CREATE CONSTRAINT TRIGGER check_type AFTER INSERT OR UPDATE ON belongings
	FROM actors
	FOR EACH ROW
	EXECUTE FUNCTION check_actor_type();